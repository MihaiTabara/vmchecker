#!/bin/bash


# location where to store homeworks
root="$HOME/teme"

# specifies how to execute remote commands
remote="ssh so@sanctuary"


# DO NOT EDIT BELOW THIS LINE (unless you know what you are doing)


function log()
{
	if [ -z "$2" ]
	then
		echo "$1" >> $HOME/logs/misc
	else
		echo "$1" >> $HOME/logs/$2
	fi
}

function print_error()
{
	echo "<p align=\"center\"><font color=red>"
	echo "$1"
	echo "</font></p><br>"
}

function security_violation()
{
	    print_error "Security violation: $1"
	    log "Security violation $1" security
}

function security_test()
{
    if [ -z $2 ] || echo $2 | egrep "\.\."  &> /dev/null; then
	    security_violation "$1=\"$2\" on `date` "
	    exit 1
    fi
}

function success()
{
    echo "<p align=\"center\"><b><font color=green>$1</font></b></p><br>"
    echo "<br>"
    log "On `date` $user ($grupa) uploaded $tema/$os successfully" uploads
}

function error()
{
    cd ..
    rm -rf "$teme"

    # if [ -z "`ls \"$HOME/teme/ok/$grupa/$user/$tema/$os\"`" ]
	# then
	# 	rm -Rf "$HOME/teme/ok/$grupa/$user/$tema/$os";
    # fi
    echo -e "<pre><font color=red size=2>$1</font></pre>"

	print_error "Tema trimisă nu respectă cerințele și nu poate fi corectată.<br>
Citiți cu atenție regulile de trimitere a temei.<br>"

    log "On `date` $user ($grupa) uploaded $tema/$os with errors: $1" uploads
    rmdir "$HOME/teme/$grupa/$user/$tema/" &> /dev/null
}

function check_file()
{
	file=`ls | grep -i "^$1\$"`
	if [ -z "$file" ] || ! [ -f "$file" ]
	then
		error "Nu există fișierul $1 în rădăcina arhivei"
		exit 1
	fi

	echo "$file"
}

function path()
{
	echo '$root/$1/$grupa/$user/$homework/$date_now'
}


grupa="$1"
user="$2"
homework="$3"
attach="$4"
start=`pwd`


if [ "$tema" = "-" ]; then
    echo "<p align=\"center\"><b><font color=red>"
    echo "Tema nu a fost selectată"
    echo "</font></b></p>"
    exit 1
fi

security_test grupa $grupa
security_test user $user
security_test homework $homework
security_test attach $attach

date_now=`date '+%Y-%m-%d %H:%M:%S'`

homework_path=`path ok`
mkdir -p "$homework"

homework_backup_path=`path backup`
mkdir -p "$homework_backup_path"

cp "$attach" "$homework_path/file.zip"
cp "$attach" "$homework_backup_path/file.zip"

cd "$homework_path" &> /dev/null

# extrage conținutul arhivei
echo "<pre>"
echo Continutul arhivei:
echo

if ! unzip file.zip 2>& 1; then
    echo "</pre>"
    error "Extragerea fișierelor a eșuat!!!"
    exit 1
fi
echo "</pre>"

rm -f file.zip

makefile=`check_file makefile`
readme=`check_file readme`

# archive must not contain non- ASCII/UTF files
bad_files="`find -type f -exec file \{\} \; | egrep -v 'ASCII|UTF| lex '`"

if ! [ -z "$bad_files" ]; then
	error "Fisiere invalide:<br><br>$bad_files"
	exit 1
fi

cd "$start"

#./update_grades

success "OK"

# starts checker process
checker_path=`path checker`

# discards old versions of homework
rm -rf "`dirname "$checker_path"`"
mkdir -p "$checker_path"
ln -s "$homework_backup_path/file.zip" "$checker_path/file.zip"

to_check=`find $HOME/teme/checker -name file.zip | wc -l`

$remote 'nohup /runchecker.sh "cd ~/ && ./checker.sh" &>/dev/null < /dev/null &'  

success "Tema a fost planificata pentru verificare. In coada de verificare sunt $to_check teme."



